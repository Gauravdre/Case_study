USING THE School case stury TABLE LAYOUTS AS SCHEMA, WRITE T-SQL STATEMENTS FOR THE FOLLOWING REQUIREMENTS :

2.	List the course wise total no. of Students enrolled. Provide the information only for students of foreign origin and only if the total exceeds 10.
IF ((
				Select Count(*) from StudentMaster
				Where Origin = 'F') > 10)
Begin 

				Select CM.CID,CourseName,Count(*) as No_of_Enrolment 
				from StudentMaster as Stu join EnrMaster as Enr
							on Stu.SID = Enr.SID
							join CourseMaster as CM 
							on Enr.CID = CM.CID
				where origin = 'F'
				Group By Cm.CID,CourseName

end 

else 
begin
				Print 'The Total No. OF Foreign Students Enrolled are Less than 10'

end




3.	List the names of the Students who have not enrolled for Java course.
Select Distinct Name 
				from CourseMaster as CM join EnrMaster as EM 
				on CM.CID = EM.CID
				join StudentMaster as SM 
				on EM.SID = SM.SID
where CourseName <> 'Java'

OR

Select Name 
	from StudentMaster as S join 
								(
										Select SID,CID                     
										from EnrMaster
										Where CID <> 2 
								
								)as Stu
	
	on S.SID = Stu.SID





4.	List the name of the advanced course where the enrollment by foreign students is the highest.	
-
Select CourseName,Count(*) as Total_no_of_Students 
from StudentMaster as SM join EnrMaster as EM 
on SM.SID = EM.SID
join CourseMaster as CM
on CM.CID = EM.CID
where Origin = 'F' and Category = 'A'
Group By CourseName




5.	List the names of the students who have enrolled for at least one basic course in the current month.
Select Name,CourseName,DOE,Category 
from CourseMaster as CM join EnrMaster as EM
						on CM.CID = EM.CID
						join StudentMaster as SM 
						on EM.SID = SM.SID
where Category = 'B' and DATEDIFF(mm,DOE,GETDATE()) = 0






6.	List the names of the Undergraduate, local students who have got a “C” grade in any basic course.

Select Name,Category,Grade,type,origin,CourseName
from EnrMaster as E join 
(
								Select * 
								from StudentMaster
								Where Origin='L' and Type = 'U'
) as ST
								on E.SID = ST.SID
								---Where Grade= 'C' 
								join CourseMaster as C
								on C.CID = E.CID
Where Grade= 'C' and Category= 'B'





7.	List the names of the courses for which no student has enrolled in the month of May 2016.
Select CourseName,Category from CourseMaster as C Left outer join 
                               (
								
								Select CID,SID,DOE, Datepart(mm,DOE) as MOE, Datepart (yy,DOE) as YOE
								from EnrMaster
								where Datepart(yy,DOE) = 2016 and Datepart(mm,DOE) = 5
								
								)as F
on C.CID = F.CID
Where F.CID IS NULL





8.	List name, Number of Enrollments and Popularity for all Courses. Popularity has to be displayed as “High” if number of enrollments is higher than 50,  “Medium” if greater than or equal to 20 and less than 50, and “Low” if the no.  Is less than 20.







9.	List the most recent enrollment details with information on Student Name, Course name and age of enrollment in days.
select Name,CourseName,SM.SID,DOE, datediff (dd,DOE,Getdate()) as [Age of Enrolment in Days] 
           from EnrMaster as EM join CourseMaster as CM
									on EM.CID = CM.CID
									join StudentMaster as SM
									on EM.SID = SM.SID
Order By  [Age of Enrolment in Days]



10.	List the names of the Local students who have enrolled for exactly 3 basic courses. 
Select * from StudentMaster as SM join
(
Select SId,Count(*) as cnt
							from EnrMaster as EM join CourseMaster as CM
							on EM.CID = CM.CID
Where Category = 'B'
							Group By SID
							having Count(*) = 3) as TET
on SM.SID = TET.SID







11.	List the names of the Courses enrolled by all (every) students.

select Name,CourseName
from EnrMaster as EnrStu join StudentMaster as S
on EnrStu.SID = S.SID
join CourseMaster as C
on EnrStu.CID = C.CID
Group by CourseName,name




12.	For those enrollments for which fee have been waived, provide the names of students who have got ‘O’ grade.
Select Name,FWF,Grade 
from StudentMaster as S join 
									(
									Select SID,FWF,Grade from EnrMaster
									Where FWF = '1' and  Grade ='O'
									) as O
									
on S.SID = O.SID



13.	List the names of the foreign, undergraduate students who have got grade ‘C’ in any basic course.

Select CourseName,Category,Grade,Name,Origin,type 
from CourseMaster as C join 
								(
														Select * from EnrMaster 
														Where Grade='C'
								)as E
								on C.CID = E.CID
								join StudentMaster as S
								on E.SID = S.SID

where Origin='F' and Type ='U' and Category = 'B'





14.	List the course name, total no. of enrollments in the current month.

Select C.CID,CourseName,Count(C.CID) as No_of_Enrollments,Year,Month
From 
(
									Select CID,SID,DOE, Datepart(yy,DOE) as Year,Datepart (mm,DOE) as Month
									from EnrMaster
									Group By DATEPART(yy,DOE)
									,Datepart (mm,DOE),CID,SID,DOE
) as ES 
									join CourseMaster as C 
									on ES.CID = C.CID

where Datediff(mm,DOE,GetDate()) = 0
Group by C.CID,CourseName,Year,Month






##STORED PROCEDURE
##USING THE ABOVE TABLE LAYOUTS AS SCHEMA, WRITE A STORED PROCEDURE FOR THE FOLLOWING SPECIFICATIONS:
## Input Parameters: 
##Date From (Mandatory), Date To (optional, if not specified, take the current date), & Student ID (Mandatory)  
##Requirements:
##Course-wise, enrollment-wise in ascending order of course name to be printed. If no enrollment exists for a given course for the period specified, print course name and the remarks ‘No enrollment for this period’
##------------------------------------------------------------------------------------------
##Enrollment Details of <Student Name > from <FromDate> To <ToDate>
##Origin : 							Type:
##SL. No       Course Name    Date of Enrollment    Fee Waiver?	       Grade  
##							            (Yes/No) 
##  …	   	…	       	……				……	                ……
##  …	   	…	       	……				…… 	                ……
##                       Total No. of Courses Enrolled: 
##
##
##
##Create Proc usp_Question
##
##
##(
##@SID tinyint   = '150' ,----- Input Student ID with Default Value
##@FromDate DateTime, 
##@ToDate  DateTime --- Todays/Computers Date By Default
##)
##as
##   Begin 
##
##   Declare @StudentName Varchar(40)
##   Declare @Origin Char(1)
##   Declare @Type Char(1)
##    
##
##   --- IF the Entered Student is invalid , then stop the execution of the Code
##
##If not exists ( Select * from StudentMaster where SID = @SID )
##Begin
##
##Print 'The Student ID doesnot exist, Please type the correct Student ID'
## return 0 
## end
## 
## --- Get the Student Data and Store in the variables
##
##Select  @StudentName = Name,  @Origin = Origin,   @Type = Type 
##from StudentMaster as SM join EnrMaster as EM
##on SM.SID = EM.SID
##where SM.Sid = @SID
##Print '******************************************************************************************'
##Print		+Space(30)	+'*  Welcome to School Casestudy  *'  + Space(10)
##Print '******************************************************************************************'
##Print 'Enrollment Details of :: ' + @StudentName+space(20) +'FROM -'+Space(2)+ Convert(Varchar(20),@FromDate,107)+Space(2)
##+ 'TO - ' + Convert(Varchar(20),@ToDate,107)  --  CONVERT(datetime,@EntryDate)                  
##Print     'Origin : ' +	@Origin					 +Space(40)                  + 'Type : ' +  @Type
##Print '------------------------------------------------------------------------------------------'
##Print 'SL. No'   +Space(5)  + 'Course Name' +Space(5)  +  'Date of Enrollment' +Space(5)   +  'Fee Waiver?(Yes/No)' +Space(5)  	+  'Grade'  
##Print '------------------------------------------------------------------------------------------'
##
##Select CourseName,DOE,FWF,Grade, ROW_NUMBER() over (Order by DOE asc) as Rno into #EnrD
##from CourseMaster as CM join EnrMaster as EM
##on CM.CID = EM.CID
##join StudentMaster as SM
##on EM.SID= SM.SID
##Where SM.SID = @SID 
##order by DOE
##
##
##
##Declare @CourseName Varchar(40)
##Declare @DOE DateTime
##Declare @FWF Bit
##Declare @Grade Char(1)
##
##Declare @X int 
##Set @X = 1
##
##--No of Rows in the Temporary table 
##Declare @NoOfCourses int 
##Select @NoOfCourses = Count(*) From #EnrD
##
##While (@X <= @NoOfCourses)
##begin 
## 
##      ---Get the Each row details one by one
##	  Select @CourseName =CourseName,@DOE= DOE,@FWF=FWF,@Grade =isnull (Grade,'O') from #EnrD where Rno = @X
##
##	  Print Cast(@X as char(5))  +Space(8)+
##	        cast(@CourseName as char(8)) +Space(8)+
##            Convert (Varchar, @DOE,107) +Space(14)+
##			cast (@FWF as char(5)) +Space(16)+
##			Cast (@Grade as char(5)) 
##
##	        
##	  ---incr
##	  Set @X=@X + 1 
##end
##
##Print '------------------------------------------------------------------------------------------'
##Print      +Space(50) + 'Total No of Courses Enrolled are :'  + cast (@NoOfCourses as Varchar) 
##Print '------------------------------------------------------------------------------------------'
##
##end
##Go
##
##===========================================================================================
##
##exec [dbo].[usp_Question]  '65','2018-10-09' , '2020-06-21'
##
##*** End of Document ***
